0.开始

History:

版本1.1		2017/05/18	Daniel
添加了学习方法论
版本1.0		2017/05/15	Daniel		

一、为什么会有这份记录？
从寒假开始接触Linux学习至今将近半年，虽然学习不断，但知识总是死的，如果不用，难免遗忘，近一段时间这种感觉愈发强烈，翻开以前学习过的内容，发现竟然十分生疏，因此萌生了这个想法，在Linux环境下，运用vim编辑器和Git系统，一方面是增加对系统和相关工具的熟悉，另一方面是对学习过程中的一个总结反思。又或许以后可以为他人提供一个借鉴教训。
另外，今日又重读 Eric Raymond 的 how to be a hacker,其中关于写作的看法也给了我一些启发，努力成为一个好的写手的过程也是对思维的一种很好的训练。

二、我的Linux学习方法论
1.一点回顾
对于计算机的了解始于高中时代的信息学竞赛，从谭浩强的C++和刘汝佳的紫皮书学起，然而当时住校，手头没有电脑，学校机房总有时间限制，当然最重要的是缺少经验，自学能力不够强又没有专业的老师，挣扎了几个月就放弃了，但自此却在心中种下了一个种子，虽然后续没有进行专业知识的学习，但对相关领域一直都在关注，直到高三偶然接触到了Hacker文化，尤其是读到了Eric Raymond的一份经典文档How to be a hacker，昔日的激情突然被点燃，同时ESR指出了一条学习的路径，高考完后我便按照这个路径开始我的hacker梦，先学Python，觉得差不多了后开始了Linux的学习，一直到现在。
2.个人总结的学习方法论
这里说的方法论主要针对的是自学，因为本人Python和Linux都是一路自己摸爬滚打，踩了不少坑，根据过去的经验教训总结了一下。
首先要提出的一点就是，一开始自学绝对不能系统的学，因为自学没有老师，没有大纲，没有作业，没有考试，没有同学之间的相互竞争，很容易在学习的过程中欺骗自己，有些模糊的知识却假装自己学会了，最后学完之后发现什么都不知道，当然也不是绝对的，如果你对自己的内心非常的诚实，那么其实也是没问题的，但我觉得真正能对自己的内心保持真诚是很难的，因此我提倡的是一种项目式、探索式的学习，回报周期短，利用兴趣和激情坚持学习。
下面是我前一段时间写的，先直接贴过来了吧。

学习方法论
一、项目式学习
目标-->分而治之-->慎重选用教材-->跟随前辈一步步走+自由探索-->学会提问，学会解决问题

二、二八法则
适用于探索阶段，二八法则意味这只需要20%的知识就可以解决80%的问题，这句话有两个含义：1.你只需要一个知识体系中20%的知识就可以通过自己探索解决80%的问题：初学时不必过于纠结某些细节的东西；2.你只有掌握了20%后才能去探索，否则只有太少的知识量就去自由实践很容易遇到无法解决的问题，因而打消积极性，影响情绪。

所以在掌握了一个领域20%的知识之前，一定要找到一本好的教材或一个有经验同时愿意教你的前辈，选择教材或前辈的原则就是对于初学者友好。具体来说包括：从头开始，从最基本的安装设置等做起，可以通过一步步的模仿收获技能；指导方法详细，对于整个过程中的每一个可能困惑的小细节都进行指导说明；忽视底层细节，开始先忽略一些复杂的知识，直接引导你进行一步步操作，体会到成就感；穿插基础理论知识，根据教学情况穿插一些必要的理论知识，知识的量和度都刚好维持在帮助你理解相关方法但又不至于令人感到困惑和无趣；探索的空间，能根据已经学习到了方法进行变换，将其进行拓展，既可以巩固已有的知识，又提供了一种新的可能性，同时激发了探索的兴趣。
在这个阶段，主要的学习方式是类比，在指导下学习一些技能，进行类比迁移到其他问题上去。好处是很快入门、提升兴趣，但缺陷就是解决的问题有限，一旦出现超出经验（包括自己的经验和网友等他人经验）范围的问题，由于缺乏扎实的基础知识技能，方法工具有限，便很难解决，因为经验有限意味着自己或他人的数据库里没有这个东西，无法类比或模仿解决，基础不牢意味着无从下手推理。但不能因此气馁或纠缠于其中，所谓君子报仇十年不晚，继续学习，等回头终有一天会收拾它。

而在掌握了该领域20%的知识后，便可以自主进行深一步的学习，利用网络资源、相关文档、手册等解决问题，提升技能

三、学会提问，学会解决问题
虽然我们常说提出问题比解决问题重要的多，但是在初学阶段，我觉得提出问题反而是更常见的情况，因为你一旦开始学习，开始体会到其中的乐趣，你会自然而然地冒出很多想法，尤其是对于编程，你可以提出很多的可能性，而往往解决问题才是关键。

遇到问题第一步，就是正确的表述问题，把遇到的问题明确的记录下来，因为组织语言的过程其实就是思考问题本身的过程。说不定等把问题明确表述出来之后你就发现自己已经找到了答案。
然后，试着自己去寻求答案，这时候首先应该动用官方文档、搜搜引擎，论坛等，尤其是官方文档，因为他是最权威的参考，诚如上面所说，编程这东西有很多可能性，更新速度又很快，因而可能很多广泛流传的东西都是已经过时的或者有误差的，所以一定要擅于查阅官方文档、手册（事实上我觉得如果有过编程经验，学习一门新技能最好的方式就是利用官方手册，有些官方手册本身就是经典）

四、零碎知识
我往往会在一些零碎时间里学习一些几分钟技能，给自己充充电，不时的可以派上用场，解决一些问题，但是这种零碎知识有一个致命的缺陷——不成系统，大多数都只是一点点小技巧，在某些特定的场合可以利用现成的这些小技巧提高效率，解决特定的某些问题，但是如果真正遇到超出经验之外的问题，就需要自己的思考猜想尝试推理进行解决，这时候碎片知识反而可能会限制思考，因而它不是一个系统的框架，很容易在面临问题时东一榔头西一棒槌，忽略问题的关键，依赖于特殊的技巧和方式。

